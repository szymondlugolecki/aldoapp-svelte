generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  customer
  moderator
  admin
}

enum MainCategories {
  cattle
  poultry
  backyard
}

enum Producent {
  deheus
  unknown
}

enum OrderStatus {
  pending
  processing
  shipped
  delivered
  cancelled
}

enum PromoCodeType {
  fixed
  percentage
}

model User {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User data
  email    String  @unique
  fullName String
  role     Role    @default(customer)
  banned   Boolean @default(false)

  verificationToken VerificationToken?
  orders            Order[]
  products          Product[]
  subscriptions     Subscription[]

  @@unique([id, email])
  @@index([id])
  @@index([email])
}

model VerificationToken {
  id String @id @default(uuid())

  // Verification token data
  verificationToken String   @default(uuid())
  code              String   @db.Char(4)
  userAgent         String
  expires           DateTime
  email             String

  user User @relation(fields: [email], references: [email])

  @@unique([verificationToken])
  @@unique([code])
  @@unique([email])
  @@index([email])
  @@index([code])
  @@index([verificationToken])
}

model OrderProducts {
  id String @id @default(uuid())

  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  quantity Int

  @@index([orderId])
  @@index([productId])
}

model Order {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Order status
  status OrderStatus

  // Products in the order
  products        OrderProducts[] // this includes products and quantity
  orderProductsId String
  // Customer who made the order
  customer        User            @relation(fields: [customerId], references: [id])
  customerId      String
  // Optional: promo code used
  PromoCode       PromoCode?      @relation(fields: [promoCode], references: [code])
  promoCode       String?

  // Shipping address
  address      Json
  customerName String

  @@unique([id])
  @@index([customerId])
  @@index([promoCode])
  @@index([orderProductsId])
}

model Subscription {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  endpoint     String
  subscription Json
  user         User?   @relation(fields: [userId], references: [id])
  userId       String?

  @@unique([id])
  @@unique([endpoint])
  @@index([userId])
  @@index([endpoint])
}

model PromoCode {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  disabled   Boolean       @default(false) // if the code is disabled it cant be used
  code       String
  discount   Float // discount value
  type       PromoCodeType // whether its a fixed value or a percentage
  validSince DateTime
  validUntil DateTime
  useCount   Int           @default(0) // how many times the code has been used
  useLimit   Int // how many times the code can be used
  onePerUser Boolean // whether the code can be used only once per user

  selectedProducts Product[] // the products the code can be used on, if empty it can be used on all products
  Order            Order[]

  @@unique([id])
  @@unique([code])
}

model Product {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Product info
  name        String
  description String?
  symbol      String
  category    MainCategories
  subcategory String
  price       Float
  weight      Float
  amountLeft  Int
  producent   Producent
  author      User           @relation(fields: [userId], references: [id])
  userId      String
  encodedURL  String
  images      Image[]

  OrderProducts OrderProducts[]
  PromoCode     PromoCode?      @relation(fields: [promoCodeId], references: [id])
  promoCodeId   String?

  @@unique([id])
  @@index([userId])
  @@index([category])
  @@index([promoCodeId])
}

model Image {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@unique([id])
  @@unique([url])
  @@index([productId])
}
