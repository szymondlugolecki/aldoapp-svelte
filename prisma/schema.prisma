generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  customer
  moderator
  admin
}

enum MainCategories {
  cattle
  poultry
  backyard
}

enum Producent {
  deheus
  unknown
}

model User {
  id                String             @id
  email             String             @unique
  fullName          String
  role              Role               @default(customer)
  banned            Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  verificationToken VerificationToken?
  orders            Order[]
  products          Product[]

  @@unique([id, email])
  @@index([id])
  @@index([email])
}

model VerificationToken {
  id                String   @id @default(uuid())
  verificationToken String   @default(uuid())
  code              String   @unique @db.Char(4)
  userAgent         String
  expires           DateTime
  user              User     @relation(fields: [email], references: [email])
  email             String   @unique

  @@unique([verificationToken, code, email])
  @@index([email])
  @@index([code])
  @@index([verificationToken])
}

model Order {
  id         String     @id @default(uuid())
  status     String
  products   Json // this includes products and quantity
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  customer   User       @relation(fields: [customerId], references: [id])
  customerId String
  address    Json
  PromoCode  PromoCode? @relation(fields: [promoCode], references: [code])
  promoCode  String?
  Product    Product[]

  @@unique([id])
  @@index([customerId])
  @@index([promoCode])
}

model PromoCode {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  code       String   @unique
  discount   Float
  validUntil DateTime
  useCount   Int      @default(0)
  useLimit   Int
  onePerUser Boolean

  Order Order[]

  @@unique([id, code])
}

model Product {
  id          String         @id
  name        String
  description String?
  symbol      String
  category    MainCategories
  subcategory String
  price       Float
  weight      Float
  amountLeft  Int
  producent   Producent
  encodedURL  String
  images      Image[]
  author      User           @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  orderId     String?
  Order       Order?         @relation(fields: [orderId], references: [id])

  @@unique([id])
  @@index([userId])
  @@index([category])
  @@index([orderId])
}

model Image {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@unique([id, url])
  @@index([productId])
}
